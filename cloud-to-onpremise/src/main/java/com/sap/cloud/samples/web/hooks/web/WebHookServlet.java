package com.sap.cloud.samples.web.hooks.web;

import java.io.BufferedReader;
import java.io.IOException;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpStatus;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.log4j.Logger;

import com.sap.cloud.account.TenantContext;
import com.sap.cloud.samples.web.hooks.http.BackendSystemClient;
import com.sap.cloud.samples.web.hooks.http.SCCHttpClient;

public class WebHookServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private static final Logger LOGGER = Logger.getLogger(WebHookServlet.class);
    private static final String DESTINATION_NAME = "on-premise-destination";
    private static final String SYSTEM_PROP_VERIFICATION_TOKEN = "verificationToken";

    @Resource
    private TenantContext tenantContext;

    /**
     * Verification token generated by the web hook service.
     */
    private String verificationToken;

    @Override
    public void init() throws ServletException {
        super.init();
        verificationToken = System.getProperty(SYSTEM_PROP_VERIFICATION_TOKEN);
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.getWriter().print(verificationToken);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        try {
            try (SCCHttpClient sccClient = createSCCHttpClient();
                    BackendSystemClient client = new BackendSystemClient(sccClient, DESTINATION_NAME)) {
                client.post(readPayload(req));
            }
            resp.setStatus(HttpStatus.SC_CREATED);
        } catch (IOException e) {
            String message = "Unexpected exception occurred";
            LOGGER.error(message, e);
            resp.sendError(HttpStatus.SC_INTERNAL_SERVER_ERROR, message);
        }
    }

    private String readPayload(HttpServletRequest request) throws IOException {
        StringBuilder payload = new StringBuilder(request.getContentLength());
        try (BufferedReader reader = new BufferedReader(request.getReader())) {
            String line = null;
            while ((line = reader.readLine()) != null) {
                payload.append(line);
            }
        }
        return payload.toString();
    }

    @SuppressWarnings("deprecation")
    private SCCHttpClient createSCCHttpClient() {
        return new SCCHttpClient(HttpClientBuilder.create(), tenantContext.getAccountName());
    }
}